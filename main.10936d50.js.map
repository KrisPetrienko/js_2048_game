{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","length","every","row","Error","restart","status","result","moveTiles","isStateDifferent","state","updateGame","score","putNewNumber","cloneState","firstMoveMade","newState","push","column","isGameLost","isGameWon","reduce","space","rowIndex","forEach","cell","cellIndex","x","y","Math","floor","random","availableSpace","getAvailableSpace","randomSpace","getRandomSpace","getNewNumber","some","horizontal","firstCoord","position","forward","addScore","firstCoordLength","secondCoordLength","initialSecondCoord","startOfStripe","endOfStirpe","step","rowLength","columnLength","mergedInStripe","Array","fill","secondCoord","merged","currentCellCoords","getCellCoords","nextCellCoords","module","exports","require","game","refreshTable","fieldRows","document","querySelectorAll","fieldCell","children","stateCell","className","innerText","refreshScore","querySelector","refreshButton","button","refreshMessage","gameStatus","message","classList","add","remove","refresh","getState","getScore","getFirstMoveMade","getStatus","addEventListener","start","e","key","preventDefault","moveUp","moveRight","moveDown","moveLeft"],"mappings":"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","file":"main.10936d50.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    if (\n      initialState.length === 4 &&\n      initialState.every((row) => row.length === 4)\n    ) {\n      this.initialState = initialState;\n      this.restart();\n    } else {\n      throw new Error('Initial state is not valid!');\n    }\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(true, false);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(true, true);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(false, false);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const result = this.moveTiles(false, true);\n\n      if (this.isStateDifferent(result.state)) {\n        this.updateGame(result);\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.restart();\n    this.status = 'playing';\n\n    this.putNewNumber();\n    this.putNewNumber();\n  }\n\n  restart() {\n    this.state = this.cloneState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n    this.firstMoveMade = false;\n  }\n\n  cloneState(state) {\n    const newState = [];\n\n    for (let row = 0; row < state.length; row++) {\n      newState.push([...state[row]]);\n    }\n\n    return newState;\n  }\n\n  isStateDifferent(newState) {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let column = 0; column < this.state[row].length; column++) {\n        if (this.state[row][column] !== newState[row][column]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateGame(result) {\n    this.state = result.state;\n    this.score += result.score;\n    this.firstMoveMade = true;\n    this.putNewNumber();\n\n    if (this.isGameLost()) {\n      this.status = 'lose';\n    } else if (this.isGameWon()) {\n      this.status = 'win';\n    }\n  }\n\n  getFirstMoveMade() {\n    return this.firstMoveMade;\n  }\n\n  getAvailableSpace() {\n    return this.state.reduce((space, row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          space.push({\n            x: cellIndex,\n            y: rowIndex,\n          });\n        }\n      });\n\n      return space;\n    }, []);\n  }\n\n  getRandomSpace(space) {\n    return space[Math.floor(Math.random() * space.length)];\n  }\n\n  getNewNumber() {\n    return Math.floor(Math.random() * 10) === 0 ? 4 : 2;\n  }\n\n  putNewNumber() {\n    const availableSpace = this.getAvailableSpace();\n    const randomSpace = this.getRandomSpace(availableSpace);\n\n    this.state[randomSpace.y][randomSpace.x] = this.getNewNumber();\n  }\n\n  isGameLost() {\n    if (this.getAvailableSpace().length === 0) {\n      if (\n        this.isStateDifferent(this.moveTiles(false, false).state) ||\n        this.isStateDifferent(this.moveTiles(true, true).state) ||\n        this.isStateDifferent(this.moveTiles(false, true).state) ||\n        this.isStateDifferent(this.moveTiles(true, false).state)\n      ) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  isGameWon() {\n    return this.state.some((row) => row.some((cell) => cell === 2048));\n  }\n\n  getCellCoords(horizontal, firstCoord, position) {\n    if (horizontal) {\n      return {\n        row: firstCoord,\n        column: position,\n      };\n    }\n\n    return {\n      row: position,\n      column: firstCoord,\n    };\n  }\n\n  moveTiles(horizontal, forward, addScore) {\n    const state = this.cloneState(this.state);\n    let score = 0;\n\n    const rowLength = state[0].length;\n    const columnLength = state.length;\n    let firstCoordLength;\n    let secondCoordLength;\n\n    if (horizontal) {\n      firstCoordLength = columnLength;\n      secondCoordLength = rowLength;\n    } else {\n      firstCoordLength = rowLength;\n      secondCoordLength = columnLength;\n    }\n\n    let initialSecondCoord;\n    let startOfStripe;\n    let endOfStirpe;\n    let step;\n\n    if (forward) {\n      initialSecondCoord = secondCoordLength - 2;\n      startOfStripe = -1;\n      endOfStirpe = secondCoordLength;\n      step = 1;\n    } else {\n      initialSecondCoord = 1;\n      startOfStripe = secondCoordLength;\n      endOfStirpe = -1;\n      step = -1;\n    }\n\n    for (let firstCoord = 0; firstCoord < firstCoordLength; firstCoord++) {\n      const mergedInStripe = Array(secondCoordLength).fill(false);\n\n      for (\n        let secondCoord = initialSecondCoord;\n        secondCoord !== startOfStripe;\n        secondCoord -= step\n      ) {\n        let merged = false;\n        let position = secondCoord;\n\n        let currentCellCoords = this.getCellCoords(\n          horizontal,\n          firstCoord,\n          position,\n        );\n        let nextCellCoords = this.getCellCoords(\n          horizontal,\n          firstCoord,\n          position + step,\n        );\n\n        while (\n          position + step !== endOfStirpe &&\n          (state[nextCellCoords.row][nextCellCoords.column] === 0 ||\n            (state[nextCellCoords.row][nextCellCoords.column] ===\n              state[currentCellCoords.row][currentCellCoords.column] &&\n              !mergedInStripe[position + step] &&\n              !merged))\n        ) {\n          if (state[nextCellCoords.row][nextCellCoords.column] > 0) {\n            merged = true;\n            score += state[nextCellCoords.row][nextCellCoords.column] * 2;\n          }\n\n          state[nextCellCoords.row][nextCellCoords.column] +=\n            state[currentCellCoords.row][currentCellCoords.column];\n          state[currentCellCoords.row][currentCellCoords.column] = 0;\n          position += step;\n\n          currentCellCoords = this.getCellCoords(\n            horizontal,\n            firstCoord,\n            position,\n          );\n\n          nextCellCoords = this.getCellCoords(\n            horizontal,\n            firstCoord,\n            position + step,\n          );\n        }\n\n        if (merged) {\n          mergedInStripe[position] = true;\n        }\n      }\n    }\n\n    return {\n      state: state,\n      score: score,\n    };\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nfunction refreshTable(state) {\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  for (let row = 0; row < state.length; row++) {\n    for (let column = 0; column < state[row].length; column++) {\n      const fieldCell = fieldRows[row].children[column];\n      const stateCell = state[row][column];\n\n      fieldCell.className = 'field-cell field-cell--' + stateCell;\n\n      if (stateCell > 0) {\n        fieldCell.innerText = stateCell;\n      } else {\n        fieldCell.innerText = '';\n      }\n    }\n  }\n}\n\nfunction refreshScore(score) {\n  document.querySelector('.game-score').innerText = score;\n}\n\nfunction refreshButton(firstMoveMade) {\n  if (firstMoveMade) {\n    button.className = 'button restart';\n    button.innerText = 'Restart';\n  } else {\n    button.className = 'button start';\n    button.innerText = 'Start';\n  }\n}\n\nfunction refreshMessage(gameStatus) {\n  const messages = document.querySelectorAll('.message');\n\n  messages.forEach((message) => message.classList.add('hidden'));\n\n  switch (gameStatus) {\n    case 'idle':\n      document.querySelector('.message-start').classList.remove('hidden');\n      break;\n    case 'win':\n      document.querySelector('.message-win').classList.remove('hidden');\n      break;\n    case 'lose':\n      document.querySelector('.message-lose').classList.remove('hidden');\n      break;\n  }\n}\n\nfunction refresh() {\n  refreshTable(game.getState());\n  refreshScore(game.getScore());\n  refreshButton(game.getFirstMoveMade());\n  refreshMessage(game.getStatus());\n}\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  switch (button.innerText) {\n    case 'Start':\n      game.start();\n      break;\n    case 'Restart':\n      game.restart();\n  }\n\n  refresh();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n      e.preventDefault();\n      game.moveUp();\n      break;\n    case 'ArrowRight':\n      e.preventDefault();\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      e.preventDefault();\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      e.preventDefault();\n      game.moveLeft();\n  }\n\n  refresh();\n});\n"]}